{
  "new component": {
    "prefix": "class web component",
    "body": [
      "import buildShadowRoot from './buildShadowRoot.js';",
      "",
      "class ${1:${TM_FILENAME_BASE/^(.)|-(.)/${1:/upcase}${2:/upcase}/gm}} extends HTMLElement {",
      "\tconstructor() {",
      "\t\tsuper();",
      "\t\tconst html = `",
      "\t\t\t<style>",
      "\t\t\t\t:host {",
      "\t\t\t\t}",
      "\t\t\t</style>",
      "\t\t\t<slot></slot>",
      "\t\t`;",
      "\t\tbuildShadowRoot(html,this);",
      "\t\tthis.elems = {",
      "\t\t\t${3:elem}: this.shadowRoot.querySelector('${4:selector}')",
      "\t\t};",
      "\t}",
      "",
      "\tstatic get observedAttributes() {",
      "\t\treturn ['${5:sampleAttr}'];",
      "\t}",
      "",
      "\tattributeChangedCallback(attrName, oldVal, newVal) {",
      "\t\tswitch(attrName){",
      "\t\t\tcase '${5:sampleAttr}':",
      "\t\t\t\tthis.elems.${3:elem}.setAttribute('${5:sampleAttr}',newVal);",
      "\t\t\t\tbreak;",
      "\t\t\tdefault:",
      "\t\t\t\tbreak;",
      "\t\t}",
      "\t}",
      "",
      "\tget ${5:sampleAttr}(){",
      "\t\treturn this.getAttribute('${5:sampleAttr}');",
      "\t}",
      "\tset ${5:sampleAttr}(val){",
      "\t\tif (val) {",
      "\t\t\tthis.setAttribute('${5:sampleAttr}', val);",
      "\t\t} else {",
      "\t\t\tthis.removeAttribute('${5:sampleAttr}');",
      "\t\t}",
      "\t}",
      "}",
      "",
      "customElements.define('${TM_FILENAME_BASE}', $1);",
      "export default $1;"
    ],
    "description": "Boilerplate web component"
  },
  "get set value": {
    "prefix": "get attribute with value",
    "body": [
      "get ${0:attr}(){",
      "\treturn this.getAttribute('${0:attr}');",
      "}",
      "set ${0:attr}(val){",
      "\tif (val) {",
      "\t\tthis.setAttribute('${0:attr}', val);",
      "\t} else {",
      "\t\tthis.removeAttribute('${0:attr}');",
      "\t}",
      "}"
    ],
    "description": "Getter and Setter for attribute with a value."
  },
  "get set no value": {
    "prefix": "get attribute no value",
    "body": [
      "get ${0:attr}(){",
      "\treturn this.hasAttribute('${0:attr}');",
      "}",
      "set ${0:attr}(val){",
      "\tif (val) {",
      "\t\tthis.setAttribute('${0:attr}', '');",
      "\t} else {",
      "\t\tthis.removeAttribute('${0:attr}');",
      "\t}",
      "}"
    ],
    "description": "Getter and Setter for attribute without a value."
  },
  "custom event": {
    "prefix": "custom event",
    "body": [
      "this.dispatchEvent(new CustomEvent('${1:eventName}', {",
      "\tdetail: {",
      "\t\t${2}",
      "\t}",
      "}))"
    ],
    "description": "Getter and Setter for attribute without a value."
  },
  "watch children": {
    "prefix": "watchChildren mutation observer",
    "body": [
      "//This goes in the constructor:",
      "//this.observer = this.watchChildren();",
      "//this.updateChildren();",
      "watchChildren(){",
      "\treturn new MutationObserver(mutations => {",
      "\t\tmutations.forEach(mutation => {",
      "\t\t\tthis.updateChildren();",
      "\t\t});",
      "\t});",
      "}",
      "",
      "updateChildren(){",
      "\tthis.observer.disconnect();",
      "",
      "\t[...this.elems.container.children].forEach(child => child.remove());",
      "",
      "\t[...this.children].forEach(child => {",
      "\t\tif(child.localName === '${1:tag}'){",
      "\t\t\tthis.elems.container.appendChild(child.cloneNode(true))",
      "\t\t}",
      "\t});",
      "",
      "\tthis.observer.observe(this, { childList: true });",
      "}"
    ],
    "description": "Adding mutation observer for children changes"
  }
}
